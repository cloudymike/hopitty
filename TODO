Where to start
===============
commonweb includes all links. Replace link buttons in all cgi-bin files.

coverage
python-coverage run --source=ctrl runctrl.py -f ../recipe/cold_short_pump -q

All data passing into a new module to be shared between cgi-bin and controller
   Test how modules are handled in cgi-bin
   Do a little bit of thinking on the data module thus created

Create a maintenance programs module that is similar to recipeliststatus, but
reading the json files instead.

Add test button to runcontrol page. This will do a quick run and reality check of the recipe.

Better testing
    Data module, as described above, read write compare...
    Create test for recipelist module. Take a snapshot of current recipe module and
        write nosetest.
    quick scan of all recipes in my homedirectory. This will be a non-required 
        test so questionable if it is part of checkall.

====== Laidback work =====
Remove unused code
    Commented out code
    import statements with yellow triangle
    pepme
    
    
    
 
====== Less immediate =====
stages should probably be a class
Look for unused code as includes etc.




====== Post brew issues and observations =======
after brew 130202
Post cleaning not working as it relies on scale.

after brew 130126
Add a link to gravity/temperature calculator on the web

Add key mashing data to mash status page from recipe
  Equipment temperature
  (mash schedule..)

====== To Fix =======
refactoring
  stages class ( & module)

refactoring
  runctrl.py, breakout as a def or class
  Should be possible to call (as needed when recipelist is done

Break out getop and use an options dictionary

How to start a brew?

cloudrecipe.py as standalone exec

Add the user for the path to the home dir bsmx file as an input option
to recipeScanner

===== Hardware Issues =====
Hardware are sometimes failing at startup. Test this in loop.

X10 controller hangs at startup at times. Debug this. It seems like a reboot
fixes the problem.

Consider create a HW check mode, that will fail if not all hardware sensors and 
controllers are OK


==== Checks =====
  mutex (link to other controller that should NOT be activated at same time)
  max values (as pump volume)
  Timeouts?
  watch dogs? Water checks?


==== Unknown ====
dict_.get('key2', "Key doesn't exist")

Watchdog to shut all down?


